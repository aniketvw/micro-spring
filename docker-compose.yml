services:
  product:
    build: microservices/product-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  recommendation:
    build: microservices/recommendation-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    build: microservices/review-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    build: microservices/product-composite-service
    mem_limit: 512m
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      rabbitmq:
        condition: service_healthy

  mongodb:
    image: mongo:latest
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: [ "mongod" ]
    healthcheck:
      test: [ "CMD", "mongosh", "--quiet", "localhost/test", "--eval", "db.runCommand({ ping: 1 }).ok" ]
      interval: 5s
      timeout: 2s
      retries: 60

  mysql:
    image: mysql:latest
    mem_limit: 512m
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpwd
      MYSQL_DATABASE: review-db
      MYSQL_USER: user
      MYSQL_PASSWORD: pwd
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uuser", "-ppwd" ]
      interval: 5s
      timeout: 2s
      retries: 60

  rabbitmq:
    image: rabbitmq:4.1.4-management
    mem_limit: 512m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running", "--quiet"]
      interval: 5s
      timeout: 2s
      retries: 60

  eureka:
    build: discoveryServer
    mem_limit: 512m
    ports:
      - "8761:8761"
